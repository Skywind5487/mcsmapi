mcsmapi.models.file
===================

.. py:module:: mcsmapi.models.file


Classes
-------

.. autoapisummary::

   mcsmapi.models.file.FileItem
   mcsmapi.models.file.FileList
   mcsmapi.models.file.CommonConfig


Module Contents
---------------

.. py:class:: FileItem(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
       __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: name
      :type:  str
      :value: 'New File'



   .. py:attribute:: size
      :type:  int
      :value: 0



   .. py:attribute:: time
      :type:  str
      :value: ''



   .. py:attribute:: mode
      :type:  int
      :value: 777



   .. py:attribute:: type
      :type:  int
      :value: 0



   .. py:attribute:: daemonId
      :type:  str
      :value: ''



   .. py:attribute:: uuid
      :type:  str
      :value: ''



   .. py:attribute:: target
      :type:  str
      :value: ''



   .. py:method:: rename(newName: str) -> bool

      重命名该文件或文件夹。

      **参数:**
     <br> - new_name (str): 源文件或文件夹的新名字。

      **返回:**
     <br> - bool: 重命名成功后返回True。



   .. py:method:: delete() -> bool

      删除该文件或文件夹。

      **返回:**
     <br> - bool: 重命名成功后返回True。



   .. py:method:: copy(target: str) -> bool

      Returns a copy of the model.

      !!! warning "Deprecated"
          This method is now deprecated; use `model_copy` instead.

      If you need `include` or `exclude`, use:

      ```python {test="skip" lint="skip"}
      data = self.model_dump(include=include, exclude=exclude, round_trip=True)
      data = {**data, **(update or {})}
      copied = self.model_validate(data)
      ```

      Args:
          include: Optional set or mapping specifying which fields to include in the copied model.
          exclude: Optional set or mapping specifying which fields to exclude in the copied model.
          update: Optional dictionary of field-value pairs to override field values in the copied model.
          deep: If True, the values of fields that are Pydantic models will be deep-copied.

      Returns:
          A copy of the model with included, excluded and updated fields as specified.



   .. py:method:: move(target: str) -> bool

      移动该文件或文件夹到目标路径。

      **参数:**
     <br> - target (str): 目标文件或文件夹的路径。

      **返回:**
     <br> - bool: 移动成功后返回True。



   .. py:method:: unzip(target: str, code: str = 'utf-8') -> bool

      解压缩该 zip 文件到目标位置。

      **参数:**
     <br> - target (str): 解压到的目标路径。
     <br> - code (str, optional): 压缩文件的编码方式，默认为"utf-8"。
          可选值: utf-8, gbk, big5

      **返回:**
     <br> - bool: 解压成功后返回True。



.. py:class:: FileList(**data: str)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
       __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: items
      :type:  List[FileItem]


   .. py:attribute:: page
      :type:  int
      :value: 0



   .. py:attribute:: pageSize
      :type:  int
      :value: 100



   .. py:attribute:: total
      :type:  int
      :value: 0



   .. py:attribute:: absolutePath
      :type:  str
      :value: '\\'



   .. py:attribute:: daemonId
      :type:  str
      :value: ''



   .. py:attribute:: uuid
      :type:  str
      :value: ''



   .. py:attribute:: target
      :type:  str
      :value: ''



.. py:class:: CommonConfig(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
       __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: password
      :type:  str
      :value: ''



   .. py:attribute:: addr
      :type:  str
      :value: ''



