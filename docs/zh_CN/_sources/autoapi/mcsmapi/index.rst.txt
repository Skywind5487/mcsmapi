mcsmapi
=======

.. py:module:: mcsmapi


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/mcsmapi/apis/index
   /autoapi/mcsmapi/exceptions/index
   /autoapi/mcsmapi/models/index
   /autoapi/mcsmapi/pool/index
   /autoapi/mcsmapi/request/index


Attributes
----------

.. autoapisummary::

   mcsmapi.send


Classes
-------

.. autoapisummary::

   mcsmapi.OverviewModel
   mcsmapi.ApiPool
   mcsmapi.File
   mcsmapi.User
   mcsmapi.Image
   mcsmapi.Daemon
   mcsmapi.Instance
   mcsmapi.Overview
   mcsmapi.Request
   mcsmapi.MCSMAPI


Package Contents
----------------

.. py:class:: OverviewModel(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   Usage docs: https://docs.pydantic.dev/2.10/concepts/models/

   A base class for creating Pydantic models.

   Attributes:
       __class_vars__: The names of the class variables defined on the model.
       __private_attributes__: Metadata about the private attributes of the model.
       __signature__: The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

       __pydantic_complete__: Whether model building is completed, or if there are still undefined fields.
       __pydantic_core_schema__: The core schema of the model.
       __pydantic_custom_init__: Whether the model has a custom `__init__` function.
       __pydantic_decorators__: Metadata containing the decorators defined on the model.
           This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.
       __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to
           __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.
       __pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.
       __pydantic_post_init__: The name of the post-init method for the model, if defined.
       __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].
       __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.
       __pydantic_validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.

       __pydantic_fields__: A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.
       __pydantic_computed_fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

       __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
           is set to `'allow'`.
       __pydantic_fields_set__: The names of fields explicitly set during instantiation.
       __pydantic_private__: Values of private attributes set on the model instance.


   .. py:attribute:: version
      :type:  str
      :value: ''



   .. py:attribute:: specifiedDaemonVersion
      :type:  str
      :value: ''



   .. py:attribute:: system
      :type:  SystemInfo


   .. py:attribute:: record
      :type:  RecordInfo


   .. py:attribute:: process
      :type:  ProcessInfo


   .. py:attribute:: chart
      :type:  ChartInfo


   .. py:attribute:: remoteCount
      :type:  RemoteCountInfo


   .. py:attribute:: remote
      :type:  List[mcsmapi.models.daemon.DaemonModel]
      :value: []



.. py:class:: ApiPool(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

  <br> - attribute access::

   >>> Color.RED
   <Color.RED: 1>

  <br> - value lookup:

   >>> Color(1)
   <Color.RED: 1>

  <br> - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:method:: __str__()


   .. py:attribute:: AUTH
      :value: 'api/auth'



   .. py:attribute:: OVERVIEW
      :value: 'api/overview'



   .. py:attribute:: INSTANCE
      :value: 'api/instance'



   .. py:attribute:: PROTECTED_INSTANCE
      :value: 'api/protected_instance'



   .. py:attribute:: SERVICE
      :value: 'api/service'



   .. py:attribute:: FILE
      :value: 'api/files'



   .. py:attribute:: IMAGE
      :value: 'api/environment'



.. py:class:: File

   .. py:method:: show(daemonId: str, uuid: str, target: str = '', page: int = 0, page_size: int = 100) -> mcsmapi.models.file.FileList

      获取文件列表

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - target (str, 可选): 用于文件过滤的目标路径。默认为空字符串，表示不按路径过滤。
     <br> - page (int, 可选): 指定分页的页码。默认为0。
     <br> - page_size (int, 可选): 指定每页的项目数量。默认为100。

      **返回:**
     <br> - FileList: 包含文件列表信息和分页详情的FileList模型。



   .. py:method:: content(daemonId: str, uuid: str, target: str) -> str | bytes

      获取文件内容

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - target (str): 文件的目标路径。

      **返回:**
     <br> - str: 文件的内容信息。



   .. py:method:: update(daemonId: str, uuid: str, target: str, text: str) -> bool

      更新文件内容

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - target (str): 文件的目标路径。
     <br> - text (str): 新的文件内容。

      **返回:**
     <br> - bool: 更新成功后返回True。



   .. py:method:: download(daemonId: str, uuid: str, file_name: str) -> str

      下载文件

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - file_name (str): 要下载的文件名。路径+名字, 示例: /backup/world.zip

      **返回:**
     <br> - str: 文件下载URL。



   .. py:method:: upload(daemonId: str, uuid: str, file: bytes, upload_dir: str) -> bool
      :async:


      上传文件

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - file (bytes): 要上传的文件内容。
     <br> - upload_dir (str): 文件上传到的目标路径。

      **返回:**
     <br> - bool: 上传成功后返回True。



   .. py:method:: copy(daemonId: str, uuid: str, copy_map: dict[str, str]) -> bool

      复制多个文件夹或文件到指定位置。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 文件实例的唯一标识符。
     <br> - copy_map (dict): 复制映射，格式为 {源路径: 目标路径}

      **返回:**
     <br> - bool: 上传成功后返回True。



   .. py:method:: copyOne(daemonId: str, uuid: str, source: str, target: str) -> bool

      复制单个文件或文件夹到指定位置。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - source (str): 源文件或文件夹的路径。
     <br> - target (str): 目标文件或文件夹的路径。

      **返回:**
     <br> - bool: 移动成功后返回True。



   .. py:method:: move(daemonId: str, uuid: str, copy_map: dict[str, str]) -> bool

      移动多个文件或文件夹到指定位置。

      参数:
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - copy_map (dict): 移动映射，格式为 {源路径: 目标路径}

      返回:
     <br> - bool: 移动成功后返回True。



   .. py:method:: moveOne(daemonId: str, uuid: str, source: str, target: str) -> bool

      从源路径移动单个文件或文件夹到目标路径。

      参数:
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - source (str): 源文件或文件夹的路径。
     <br> - target (str): 目标文件或文件夹的路径。

      返回:
     <br> - bool: 移动成功后返回True。



   .. py:method:: rename(daemonId: str, uuid: str, source: str, new_name: str) -> bool

      重命名单个文件或文件夹。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - source (str): 源文件或文件夹的路径。
     <br> - new_name (str): 源文件或文件夹的新名字。

      **返回:**
     <br> - bool: 重命名成功后返回True。



   .. py:method:: zip(daemonId: str, uuid: str, source: str, targets: list[str]) -> bool

      压缩多个文件或文件夹到指定位置。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - source (str): 需要压缩到的 zip 文件路径。
     <br> - targets (list): 要压缩的目标文件或文件夹的路径。

      **返回:**
     <br> - bool: 压缩成功后返回True。



   .. py:method:: unzip(daemonId: str, uuid: str, source: str, target: str, code: str = 'utf-8') -> bool

      解压缩指定的zip文件到目标位置。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - source (str): 需要解压的zip文件路径。
     <br> - target (str): 解压到的目标路径。
     <br> - code (str, optional): 压缩文件的编码方式，默认为"utf-8"。
          可选值: utf-8, gbk, big5

      **返回:**
     <br> - bool: 解压成功后返回True。



   .. py:method:: delete(daemonId: str, uuid: str, targets: list[str]) -> bool

      删除多个文件或文件夹。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - targets (list): 要删除的文件或文件夹的路径。

      **返回:**
     <br> - bool: 删除成功后返回True。



   .. py:method:: createFile(daemonId: str, uuid: str, target: str) -> bool

      创建文件。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - target (str): 目标文件的路径，包含文件名。

      **返回:**
     <br> - bool: 创建成功后返回True。



   .. py:method:: createFloder(daemonId: str, uuid: str, target: str) -> bool

      创建文件夹

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - target (str): 目标文件夹的路径。

      **返回:**
     <br> - bool: 创建成功后返回True。



.. py:class:: User

   .. py:method:: search(username: str = '', page: int = 1, page_size: int = 20, role: str = '') -> mcsmapi.models.user.SearchUserModel

      根据用户名和角色搜索用户信息

      **参数:**
     <br> - username (str): 要搜索的用户名。默认为空字符串，表示不进行用户名过滤
     <br> - page (int): 页码，用于指示返回数据的页数。默认为1，表示返回第一页数据
     <br> - page_size (int): 每页大小，用于指定每页包含的数据条数。默认为20，表示每页包含20条数据
     <br> - role (str): 用户权限。默认为空字符串，表示不进行权限过滤
                   可用的值为 1=用户, 10=管理员, -1=被封禁的用户

      **返回:**
     <br> - SearchUserModel: 包含搜索结果的模型。该模型包含了符合搜索条件的用户信息列表，以及总数据条数、总页数等分页信息。



   .. py:method:: create(username: str, password: str, permission: int = 1) -> str | bool

      创建新用户的方法

      **参数:**
     <br> - username (str): 用户名，字符串类型
     <br> - password (str): 密码，字符串类型
     <br> - permission (int): 权限等级，整数类型，默认值为1

      **返回:**
     <br> - str|bool: 创建成功后返回用户的UUID，如果未找到该字段，则默认返回True。



   .. py:method:: update(uuid: str, config: dict[str, Any]) -> bool

      更新用户信息的方法

      **不建议直接使用此函数，建议调用search后使用update方法按需更新**

      **参数:**
     <br> - uuid (str): 用户的唯一标识符UUID
     <br> - config (dict[str, Any]): 新的用户信息，以字典形式提供，缺失内容由UserConfig模型补全。

      **返回:**
     <br> - bool: 成功时返回True



   .. py:method:: delete(uuids: list[str]) -> bool

      删除用户的方法

      **参数:**
     <br> - uuids (list[str]): 包含要删除的用户UUID的列表。

      **返回:**
     <br> - bool: 成功时返回True



.. py:class:: Image

   .. py:method:: images(daemonId: str) -> list[mcsmapi.models.image.DockerImageItem]

      获取镜像列表

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。

      **返回:**
     <br> - list[ImageModel]: 包含镜像列表详情的 ImageModel 模型的列表。



   .. py:method:: containers(daemonId: str) -> list[mcsmapi.models.image.DockerContainerItem]

      获取容器列表

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。

      **返回:**
     <br> - list[DockerContainerItem]: 包含容器列表详情的 DockerContainerItem 模型的列表。



   .. py:method:: network(daemonId: str) -> list[mcsmapi.models.image.DockerNetworkItem]

      获取网络接口列表

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。

      **返回:**
     <br> - list[DockerNetworkItem]: 包含网络接口列表详情的 DockerNetworkItem 模型的列表。



   .. py:method:: add(daemonId: str, dockerFile: str, name: str, tag: str) -> bool

      新增一个镜像

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。
     <br> - dockerFile (str): DockerFile Config
     <br> - name (str): 镜像名称。
     <br> - tag (str): 镜像版本。

      **返回:**
     <br> - bool: 新增镜像成功后返回True。



   .. py:method:: progress(daemonId: str) -> dict[str, int]

      获取镜像构建进度

      ## **由于文档此部分内容不详，未使用模型**

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符。

      **返回:**
     <br> - dict[str, int]: 包含构建进度信息的字典。



.. py:class:: Daemon

   .. py:method:: add(config: dict[str, Any]) -> str

      新增一个节点。

      参数:
     <br> - config (dict): 节点的配置信息，以字典形式提供，缺失内容由DaemonConfig模型补全。

      返回:
     <br> - str: 新增节点的ID



   .. py:method:: delete(daemonId: str) -> bool

      删除一个节点。

      参数:
     <br> - daemonId (str): 节点的唯一标识符。

      返回:
     <br> - bool: 删除成功后返回True



   .. py:method:: link(daemonId: str) -> bool

      连接一个节点。

      参数:
     <br> - daemonId (str): 节点的唯一标识符。

      返回:
     <br> - bool: 连接成功后返回True



   .. py:method:: update(daemonId: str, config: dict[str, Any]) -> bool

      更新一个节点的配置。

      **不建议直接使用此函数，建议调用overview()后在remote属性内使用updateConfig方法按需更新**

      参数:
     <br> - daemonId (str): 节点的唯一标识符。
     <br> - config (dict): 节点的配置信息，以字典形式提供，缺失内容由DaemonConfig模型补全。

      返回:
     <br> - bool: 更新成功后返回True



.. py:class:: Instance

   .. py:method:: search(daemonId: str, page: int = 1, page_size: int = 20, instance_name: str = '', status: str = '', tag: list[str] | None = None) -> mcsmapi.models.instance.InstanceSearchList

      根据指定的参数搜索实例信息

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符
     <br> - page (int): 页码，用于指示返回数据的页数。默认为1，表示返回第一页数据
     <br> - page_size (int): 每页大小，用于指定每页包含的数据条数。默认为20，表示每页包含20条数据
     <br> - instance_name (str): 实例的名称。默认为空字符串，表示不进行实例名称过滤
     <br> - status (str): 实例的状态。默认为空字符串，表示不进行状态过滤
     <br> - tag (list[str] | None): 实例的标签列表。默认为None，表示不进行标签过滤

      **返回:**
     <br> - InstanceSearchList: 包含搜索结果的模型。该模型包含了符合搜索条件的实例信息列表，以及总数据条数、总页数等分页信息。



   .. py:method:: detail(daemonId: str, uuid: str) -> mcsmapi.models.instance.InstanceDetail

      获取指定实例的详细信息

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符
     <br> - uuid (str): 实例的唯一标识符

      **返回:**
     <br> - InstanceDetail: 包含实例详细信息的模型。



   .. py:method:: create(daemonId: str, config: dict[str, Any]) -> mcsmapi.models.instance.InstanceCreateResult

      创建一个实例。

      **参数:**
     <br> - daemonId (str): 守护进程的唯一标识符，用于关联新创建的实例。
     <br> - config (dict[str, Any]): 实例的配置信息，以字典形式提供，缺失内容由InstanceConfig模型补全。

      **返回:**
     <br> - InstanceCreateResult: 一个包含新创建实例信息的结果对象，内容由InstanceCreateResult模型定义。



   .. py:method:: updateConfig(daemonId: str, uuid: str, config: dict) -> str | bool

      更新实例配置。

      **不建议直接使用此函数，建议调用search后在data属性内使用updateConfig方法按需更新**

      **参数:**
     <br> - daemonId (str): 守护进程的标识符。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - config (dict): 新的实例配置，以字典形式提供，缺失内容由InstanceConfig模型补全。

      **返回:**
     <br> - str|bool: 更新成功后返回更新的实例UUID，如果未找到该字段，则默认返回True。



   .. py:method:: delete(daemonId: str, uuids: list[str], deleteFile: bool = False) -> list[str]

      删除实例。

      **参数:**
     <br> - daemonId (str): 守护进程的标识符。
     <br> - uuids (list): 要删除的实例UUID列表。
     <br> - deleteFile (bool, optional): 是否删除关联的文件，默认为False。

      **返回:**
     <br> - list[str]: 删除操作后返回的UUID列表。



   .. py:method:: start(daemonId: str, uuid: str) -> str | bool

      启动实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要启动的实例。

      **返回:**
     <br> - str|bool: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: stop(daemonId: str, uuid: str) -> str | bool

      关闭实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要关闭的实例。

      **返回:**
     <br> - str|bool: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: restart(daemonId: str, uuid: str) -> str | bool

      重启实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要重启的实例。

      **返回:**
     <br> - str|bool: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: kill(daemonId: str, uuid: str) -> str | bool

      强制关闭实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要强制关闭的实例。

      **返回:**
     <br> - str|bool: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: batchOperation(instances: list[dict[str, str]], operation: str) -> bool

      对多个实例进行批量操作。

      **参数:**
     <br> - instances (list[dict[str,str]]): 包含多个实例信息的列表，每个实例信息为一个字典，包含 "uuid" 和 "daemonId" 字段。
     <br> - operation (str): 要执行的操作，可以是 "start", "stop", "restart", 或 "kill"。

      **返回:**
     <br> - list[dict[str,str]]:包含每个实例操作结果的列表，每个结果为一个字典，包含 "uuid" 和 "result" 字段。



   .. py:method:: update(daemonId: str, uuid: str) -> bool

      升级实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要升级的实例。

      **返回:**
     <br> - bool: 返回操作结果，成功时返回True。



   .. py:method:: command(daemonId: str, uuid: str, command: str) -> str

      向实例发送命令。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要发送命令的实例。
     <br> - command (str): 要发送的命令。

      **返回:**
     <br> - str|bool: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: get_output(daemonId: str, uuid: str, size: int | str = '') -> str

      获取实例输出。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符，用于指定需要获取输出的实例。
     <br> - size (int, optional): 获取的日志大小: 1KB ~ 2048KB，如果未设置，则返回所有日志

      **返回:**
     <br> - str: 返回结果中的 "instanceUuid" 字段值，如果未找到该字段，则默认返回True。



   .. py:method:: reinstall(daemonId: str, uuid: str, targetUrl: str, title: str = '', description: str = '') -> bool

      重装实例。

      **参数:**
     <br> - daemonId (str): 守护进程的ID，用于标识特定的守护进程。
     <br> - uuid (str): 实例的唯一标识符。
     <br> - targetUrl (str): 重装文件的目标URL。
     <br> - title (str): 重装文件的标题。
     <br> - description (str, optional): 重装文件的描述，默认为空字符串。

      **返回:**
     <br> - bool: 返回操作结果，成功时返回True。



.. py:class:: Overview

   .. py:method:: init()

      初始化方法，用于获取API概览信息并构建概览模型。

      本方法通过发送GET请求获取API概览信息，确保返回的数据类型为字典，
      然后使用这些数据来构建一个OverviewModel实例。

      :return: 返回一个OverviewModel实例，该实例使用获取的API概览信息进行初始化。



.. py:class:: Request(mcsm_url=None, timeout=None)

   .. py:attribute:: mcsm_url
      :value: ''



   .. py:attribute:: timeout
      :value: 5



   .. py:attribute:: session


   .. py:attribute:: apikey
      :value: None



   .. py:attribute:: token
      :value: None



   .. py:method:: set_mcsm_url(url)
      :staticmethod:


      设置类级别的 mcsm_url



   .. py:method:: set_timeout(timeout)
      :staticmethod:


      设置类级别的 timeout



   .. py:method:: set_apikey(apikey)
      :staticmethod:


      设置类级别的 apikey



   .. py:method:: set_token(token)
      :staticmethod:


      设置类级别的 token



   .. py:method:: send(method: str, endpoint: Any, params=None, data=None) -> Any

      发送 HTTP 请求



   .. py:method:: upload(url: str, file: bytes) -> bool
      :async:


      上传文件



.. py:data:: send

.. py:class:: MCSMAPI(url: str, timeout: int = 5)

   .. py:attribute:: authentication
      :value: None



   .. py:method:: login(username: str, password: str) -> MCSMAPI


   .. py:method:: login_with_apikey(apikey: str)


   .. py:method:: overview() -> models.overview.OverviewModel


   .. py:method:: instance() -> apis.instance.Instance


   .. py:method:: user() -> apis.user.User


   .. py:method:: daemon() -> apis.daemon.Daemon


   .. py:method:: file() -> apis.file.File


   .. py:method:: image() -> apis.image.Image


